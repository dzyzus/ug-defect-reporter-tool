@page "/feature/index"

@using DefectReporter.Shared.Models.Application
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject IHttpClientFactory HttpClientFactory

@if (features.Count != 0)
{
    <h3>Features list</h3>

    <table class="table">
        <thead>
            <tr>
                <th>Feature</th>
                <th>Description</th>
                <th>Component</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var feature in features)
            {
                <tr>
                    <td>@feature.Title</td>
                    <td>@feature.Description</td>
                    <td>@feature.Component</td>
                    <td>
                        <button type="button" class="btn btn-primary" @onclick="() => EditFeature(feature.Id)">Edit</button>
                        <button type="button" class="btn btn-danger" @onclick="() => DeleteFeature(feature.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <h3>Currently there is no features in database.</h3>    
}

@code {
    List<Feature> features = new List<Feature>();

    protected override async Task OnInitializedAsync()
    {
        var client = HttpClientFactory.CreateClient("DefectReporter.PublicServerAPI");

        try
        {
            features = await client.GetFromJsonAsync<List<Feature>>("api/feature/getFeatures");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private void EditFeature(int featureId)
    {
    }

    @inject IJSRuntime JS

    private async Task DeleteFeature(int featureId)
    {
        bool confirm = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this feature?");

        if (confirm)
        {
            var client = HttpClientFactory.CreateClient("DefectReporter.ServerAPI");

            var response = await client.DeleteAsync($"api/feature/deleteFeature/{featureId}");

            if (response.IsSuccessStatusCode)
            {
                await LoadFeatures();
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
            }
        }
    }

    private async Task LoadFeatures()
    {
        var client = HttpClientFactory.CreateClient("DefectReporter.PublicServerAPI");

        try
        {
            features = await client.GetFromJsonAsync<List<Feature>>("api/feature/getFeatures");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }
}