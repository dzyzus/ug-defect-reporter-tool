@page "/management/releases/index"

<div class="row">
    <div class="col-md-3">
        <div class="input-group mb-3">
            <span class="input-group-text">
                <i class="bi bi-search"></i>
            </span>
            <input type="text" class="form-control" @bind="searchTerm" id="releaseSearch" placeholder="Search by name" />
        </div>
    </div>
</div>

@using DefectReporter.Shared.Models.Application
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject IHttpClientFactory HttpClientFactory

@if (releases.Count != 0)
{
    <div class="text-end">
        <button type="button" class="btn btn-success" @onclick="() => AddRelease()">Add new</button>
    </div>
    <br />
    <div class="card">
        <div class="card-header">
            <h3>Available Releases</h3>
        </div>
        <ul class="list-group list-group-flush">
            @foreach (Release release in filteredReleases)
            {
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    <span>@release.Name</span>
                    <div class="btn-group" role="group" aria-label="Release Actions">
                        <button type="button" class="btn btn-primary" @onclick="() => EditRelease(release.Id)">Edit</button>
                        <button type="button" class="btn btn-danger" @onclick="() => DeleteRelease(release.Id)">Delete</button>
                    </div>
                </li>
            }
        </ul>
    </div>
}
else if (releases == null)
{
    <h3>Currently there is no releases in database.</h3>
}
else
{
    <div class="d-flex justify-content-center align-items-center" style="height: 30vh;">
        <div class="spinner-border text-center" role="status" style="width: 5rem; height: 5rem;">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
}

@code {
    List<Release> releases = new List<Release>();
    string searchTerm = string.Empty;

    List<Release> filteredReleases => releases.Where(release =>
        string.IsNullOrWhiteSpace(searchTerm) ||
        release.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
    ).ToList();

    protected override async Task OnInitializedAsync()
    {
        var client = HttpClientFactory.CreateClient("DefectReporter.PublicServerAPI");

        try
        {
            releases = await client.GetFromJsonAsync<List<Release>>("api/management/getreleases");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }
    @inject NavigationManager NavigationManager

    private void AddRelease()
    {
        NavigationManager.NavigateTo("/management/addRelease/");
    }

    private void EditRelease(int releaseId)
    {
        NavigationManager.NavigateTo($"/management/updateRelease/{releaseId}");
    }

    @inject IJSRuntime JS

    private async Task DeleteRelease(int releaseId)
    {
        bool confirm = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this release?");

        if (confirm)
        {
            var client = HttpClientFactory.CreateClient("DefectReporter.ServerAPI");

            var response = await client.DeleteAsync($"api/management/deleteRelease/{releaseId}");

            if (response.IsSuccessStatusCode)
            {
                await LoadReleases();
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
            }
        }
    }

    private async Task LoadReleases()
    {
        var client = HttpClientFactory.CreateClient("DefectReporter.PublicServerAPI");

        try
        {
            releases = await client.GetFromJsonAsync<List<Release>>("api/management/getreleases");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }
}