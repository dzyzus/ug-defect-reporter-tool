@page "/defect/updateDefect/{defectId}"

@using DefectReporter.Shared.Models.Application
@using DefectReporter.Shared.Models.Identity
@using DefectReporter.Shared.Enums
@using DefectReporter.Shared.Services
@using DefectReporter.Client.ViewModels
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.ComponentModel.DataAnnotations;

@inject IHttpClientFactory HttpClientFactory

<h3 class="text-center">Update Defect</h3>
<br />

@if (message != null)
{
    <p>@message</p>
}
else if (applicationUsers.Count == 0)
{
    <div class="d-flex justify-content-center align-items-center" style="height: 30vh;">
        <div class="spinner-border text-center" role="status" style="width: 5rem; height: 5rem;">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
}
else
{
    <EditForm Model="@defect" OnValidSubmit="UpdateDefect">
        <DataAnnotationsValidator />

        <div class="form-group">
            <label class="col-sm-2 col-form-label">Title</label>
            <InputText @bind-Value="defect.Title" class="form-control" />
            <ValidationMessage For="@(() => defect.Title)" />
        </div>

        <div class="form-group">
            <label class="col-sm-2 col-form-label">Description</label>
            <InputTextArea @bind-Value="defect.Description" class="form-control" rows="11"></InputTextArea>
            <ValidationMessage For="@(() => defect.Description)" />
        </div>
        
        <div class="form-group">
            <label for="release" class="col-sm-2 col-form-label">Release</label>
            <InputSelect id="release" class="form-control" @bind-Value="defect.ReleaseId">
                @foreach (var release in releases)
                {
                    <option value="@release.Id">@release.Name</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => defect.ReleaseId)" />
        </div>

        <div class="form-group">
            <label class="col-sm-2 col-form-label">Software Build</label>
            <InputSelect id="softwarebuild" class="form-control" @bind-Value="defect.SoftwareId">
                @foreach (var software in GetFilteredSoftwareBuilds())
                {
                    <option value="@software.Id">@software.SoftwareVersion</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => defect.SoftwareId)" />
        </div>

        <div class="form-group">
            <label for="Component">Component:</label>
            <InputSelect id="Component" class="form-control" @bind-Value="defect.Component" required>
                @foreach (var enumValue in Enum.GetValues(typeof(ComponentEnum)))
                {
                    <option value="@enumValue">@enumValue</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => defect.Component)" />
        </div>

        <div class="form-group">
            <label for="release" class="col-sm-2 col-form-label">Test</label>
            <InputSelect id="release" class="form-control" @bind-Value="defect.TestId">
                @foreach (var test in tests)
                {
                    <option value="@test.Id">@test.TestName</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => defect.TestId)" />
        </div>

        <div class="form-group">
            <label for="Component">Status</label>
            <InputSelect id="Component" class="form-control" @bind-Value="defect.Status" required>
                @foreach (var enumValue in Enum.GetValues(typeof(DefectStatusEnum)))
                {
                    <option value="@enumValue">@enumValue</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => defect.Status)" />
        </div>

        <div class="form-group">
            <label class="col-sm-2 col-form-label">Regression</label>
            <br>
            <InputCheckbox class="form-check-input" @bind-Value="defect.IsRegression" />
        </div>

        <div class="form-group">
            <label class="col-sm-2 col-form-label">Fixed</label>
            <br>
            <InputCheckbox class="form-check-input" @bind-Value="defect.IsFixed" />
        </div>

        @if (defect.IsFixed)
        {
            <div class="form-group">
                <label class="col-sm-2 col-form-label">Fixed On Version</label>
                <InputSelect id="softwarebuild" class="form-control" @bind-Value="defect.FixedOnVersion">
                    @foreach (var software in GetFilteredSoftwareBuilds())
                    {
                        <option value="@software.SoftwareVersion">@software.SoftwareVersion</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => defect.FixedOnVersion)" />
            </div>

            <div class="form-group">
                <label for="Component">Completed reason</label>
                <InputSelect id="Component" class="form-control" @bind-Value="defect.CompletedReason" required>
                    @foreach (var enumValue in Enum.GetValues(typeof(DefectCompletedReasonEnum)))
                    {
                        var field = typeof(DefectCompletedReasonEnum).GetField(enumValue.ToString());
                        var displayAttribute = (DisplayAttribute)Attribute.GetCustomAttribute(field, typeof(DisplayAttribute));

                        <option value="@enumValue">@displayAttribute.Name</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => defect.CompletedReason)" />
            </div>
        }

        <div class="form-group">
            <label class="col-sm-2 col-form-label">Current owner</label>
            <InputSelect id="currentUser" class="form-control" @bind-Value="defect.CurrentUserId">
                @foreach (var user in applicationUsers)
                {
                    <option value="@user.Id">@user.UserName</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => defect.CurrentUserId)" />
        </div>

        <label for="usersSelect">Notify</label>
        @foreach (var item in usersCheckbox)
        {
            <div class="form-check">
                <input class="form-check-input" type="checkbox" id="@item.Email" @bind="item.IsChecked" />
                <label class="form-check-label" for="@item.Email">@item.UserName - @item.Email</label>
            </div>
        }

        <br>
        <button type="submit" class="btn btn-primary">Update Defect</button>
    </EditForm>
}

@code {
    private Defect defect = new Defect();
    private string message;
    private List<Release> releases = new List<Release>();
    private List<SoftwareBuild> softwareBuilds = new List<SoftwareBuild>();
    private List<Test> tests = new List<Test>();
    private List<ApplicationUser> applicationUsers = new List<ApplicationUser>();
    private List<UsersViewModel> usersCheckbox = new List<UsersViewModel>();

    [Parameter]
    public string DefectId { get; set; }

    @inject AuthenticationStateProvider GetAuthenticationStateAsync

    protected override async Task OnInitializedAsync()
    {
        var client = HttpClientFactory.CreateClient("DefectReporter.ServerAPI");

        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();

        try
        {
            releases = await client.GetFromJsonAsync<List<Release>>("api/management/getreleases");
            applicationUsers = await client.GetFromJsonAsync<List<ApplicationUser>>("api/user/getusers");

            releases.Insert(index: 0, new Release
            {
                Id = 0,
                Name = "None"
            });

            applicationUsers.Insert(index: 0, new ApplicationUser
            {
                Id = "0",
                UserName = "None"
            });

            softwareBuilds = await client.GetFromJsonAsync<List<SoftwareBuild>>("api/management/getsoftwarebuilds");
            tests = await client.GetFromJsonAsync<List<Test>>("api/test/gettests");

            defect = await client.GetFromJsonAsync<Defect>($"api/defect/getdefectdetails/{Convert.ToInt32(DefectId)}");

            List<string> usersEmails = defect.UsersInvolvedEmails.Split(";").ToList();

            foreach (var user in applicationUsers)
            {
                if (usersEmails.Contains(user.Email))
                {
                    usersCheckbox.Add(new UsersViewModel() { UserName = @user.FirstName + " " + @user.LastName, Email = user.Email, IsChecked = true });

                }
                else
                {
                    usersCheckbox.Add(new UsersViewModel() { UserName = @user.FirstName + " " + @user.LastName, Email = user.Email, IsChecked = false });
                }
            }

            usersCheckbox.RemoveAt(index: 0);

            defect.OwnerName = authstate.User.Identity.Name;
            defect.OwnerId = applicationUsers.First(user => user.Email == defect.OwnerName).Id;
        }
        catch (Exception ex)
        {
            message = "Error: " + ex.Message;
        }
    }

    private List<SoftwareBuild> GetFilteredSoftwareBuilds()
    {
        if (defect.ReleaseId != null)
        {
            return softwareBuilds.Where(sw => sw.ReleaseId == defect.ReleaseId).ToList();
        }
        else
        {
            return new List<SoftwareBuild>() { new SoftwareBuild { Id = 1, SoftwareVersion = "None", ReleaseId = 0 } };
        }
    }

    private void OnReleaseChange(ChangeEventArgs args)
    {
        StateHasChanged();
    }

    private async Task UpdateDefect()
    {
        var client = HttpClientFactory.CreateClient("DefectReporter.ServerAPI");

        var usersEmails = usersCheckbox.Where(item => item.IsChecked).Select(item => item.Email).ToList();

        if (!usersEmails.Contains(defect.OwnerName))
        {
            usersEmails.Add(defect.OwnerName);
        }

        defect.UsersInvolvedEmails = string.Join(";", usersEmails);

        try
        {
            var response = await client.PutAsJsonAsync($"api/defect/updateDefect/{Convert.ToInt32(DefectId)}", defect);

            if (response.IsSuccessStatusCode)
            {
                @inject IEmailService EmailService

                var emailServiceResponse = await client.PostAsJsonAsync("/api/email/updateSendEmails", defect);

                if (emailServiceResponse.IsSuccessStatusCode)
                {
                    this.GoBackToIndex();
                }
                else
                {
                    message = "Failed to send email notifications.";
                }
                this.GoBackToIndex();
            }
            else
            {
                message = await response.Content.ReadAsStringAsync();
            }
        }
        catch (Exception ex)
        {
            message = ex.Message;
        }
    }

    @inject NavigationManager NavigationManager

    private void GoBackToIndex()
    {
        NavigationManager.NavigateTo("/defect/index");
    }
}