@page "/defect/create"

@using DefectReporter.Shared.Models.Application
@inject IHttpClientFactory HttpClientFactory

<h3>Create Defect</h3>

@if (successMessage != null)
{
    <p>@successMessage</p>
}
else
{
    <EditForm Model="@defect" OnValidSubmit="CreateDefect">
        <DataAnnotationsValidator />

        <div class="form-group">
            <label>Title</label>
            <InputText @bind-Value="defect.Title" class="form-control" />
            <ValidationMessage For="@(() => defect.Title)" />
        </div>

        <div class="form-group">
            <label>Description</label>
            <InputTextArea @bind-Value="defect.Description" class="form-control"></InputTextArea>
            <ValidationMessage For="@(() => defect.Description)" />
        </div>

        <div class="form-group">
            <label>Software Build</label>
            <InputText @bind-Value="defect.SoftwareBuild" class="form-control" />
            <ValidationMessage For="@(() => defect.SoftwareBuild)" />
        </div>

        <button type="submit" class="btn btn-primary">Create</button>
    </EditForm>
}

@code {
    private Defect defect = new Defect();
    private string successMessage;

    private async Task CreateDefect()
    {
        var client = HttpClientFactory.CreateClient("DefectReporter.ServerAPI");

        // Dodaj logikę walidacji, obsługi błędów itp.
        var response = await client.PostAsJsonAsync("/api/defect/createDefect", defect);

        if (response.IsSuccessStatusCode)
        {
            successMessage = await response.Content.ReadAsStringAsync();
        }
        else
        {
            // Obsługa błędów
            successMessage = "Failed to create defect.";
        }
    }
}