@page "/defect/index"

@using DefectReporter.Shared.Models.Application
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject IHttpClientFactory HttpClientFactory

@if (defects.Count != 0)
{
    <h3>Lista defektów</h3>

    <table class="table">
        <thead>
            <tr>
                <th>Title</th>
                <th>Submitter</th>
                <th>Component</th>
                <th>Status</th>
                <th>Created date</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var defect in defects)
            {
                <tr>
                    <td>@defect.Title</td>
                    <td>@defect.OwnerName</td>
                    <td>@defect.Component</td>
                    <td>@defect.Status</td>
                    <td>@defect.Created.ToString("dd-mm-yyyy")</td>
                    <td>
                        <button type="button" class="btn btn-primary" @onclick="() => EditDefect(defect.Id)">Edit</button>
                        <button type="button" class="btn btn-danger" @onclick="() => DeleteDefect(defect.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else if (defects == null)
{
    <div class="spinner-border text-center" role="status">
        <span class="sr-only">Loading...</span>
    </div>
}
else
{
    <h3>Currently there is no defects in database.</h3>
}

@code {
    List<Defect> defects = new List<Defect>();

    /// <summary>
    /// The on initlizaed async.
    /// </summary>
    /// <returns>
    /// Returns the defects list. 
    /// </returns>
    protected override async Task OnInitializedAsync()
    {
        var client = HttpClientFactory.CreateClient("DefectReporter.PublicServerAPI");

        try
        {
            defects = await client.GetFromJsonAsync<List<Defect>>("api/defect/getdefects");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    @inject IJSRuntime JS

    /// <summary>
    /// The edit defect action.
    /// </summary>
    /// <param name="defectId">
    /// The defect id.   
    /// </param>
    /// <returns>
    /// The defect edit action. 
    /// </returns>
    private async Task EditDefect(int defectId)
    {
        
    }

    private async Task DeleteDefect(int defectId)
    {
        bool confirm = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this defect?");

        if (confirm)
        {
            var client = HttpClientFactory.CreateClient("DefectReporter.ServerAPI");

            var response = await client.DeleteAsync($"api/feature/deleteDefect/{defectId}");

            if (response.IsSuccessStatusCode)
            {
                await LoadDefects();
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
            }
        }
    }

    private async Task LoadDefects()
    {
        var client = HttpClientFactory.CreateClient("DefectReporter.PublicServerAPI");

        try
        {
            defects = await client.GetFromJsonAsync<List<Defect>>("api/defect/getdefects");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }
}