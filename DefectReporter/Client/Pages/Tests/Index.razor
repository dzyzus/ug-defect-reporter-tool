@page "/test/index"

<div class="row">
    <div class="col-md-3">
        <div class="input-group mb-3">
            <span class="input-group-text">
                <i class="bi bi-search"></i>
            </span>
            <input type="text" class="form-control" @bind="searchTerm" id="testSearch" placeholder="Search by title" />
        </div>
    </div>
</div>

@using DefectReporter.Shared.Models.Application
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject IHttpClientFactory HttpClientFactory

@if (tests.Count != 0)
{
    <h3 class="text-center">Available tests in data base</h3>
    <hr />
    <br />
    <table class="table">
        <thead>
            <tr>
                <th>Test name</th>
                <th>Test case</th>
                <th>Type of test</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var test in filteredTests)
            {
                <tr>
                    <td>@test.TestName</td>
                    <td>
                        <ul style="list-style-type: none">
                            @foreach (var step in test.TestCase.Split('\n'))
                            {
                                <li>@step.Trim()</li>
                            }
                        </ul>
                     </td>
                    <td>@test.TypeOfTest</td>
                    <td>
                        <button type="button" class="btn btn-sm btn-success" @onclick="() => TestDetails(test.Id)">Details</button>
                        <button type="button" class="btn btn-sm btn-primary" @onclick="() => EditTest(test.Id)">Edit</button>
                        <button type="button" class="btn btn-sm btn-danger" @onclick="() => DeleteTest(test.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else if (tests == null)
{
    <h3>Currently there is no tests in database.</h3>
}
else
{
    <div class="d-flex justify-content-center align-items-center" style="height: 30vh;">
        <div class="spinner-border text-center" role="status" style="width: 5rem; height: 5rem;">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
}

@code {
    List<Test> tests = new List<Test>();
    string searchTerm = string.Empty;

    List<Test> filteredTests => tests.Where(test =>
    string.IsNullOrWhiteSpace(searchTerm) ||
    test.TestName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
    ).ToList();

    protected override async Task OnInitializedAsync()
    {
        var client = HttpClientFactory.CreateClient("DefectReporter.PublicServerAPI");

        try
        {
            tests = await client.GetFromJsonAsync<List<Test>>("api/test/getTests");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    @inject NavigationManager NavigationManager

    private void EditTest(int testId)
    {
        NavigationManager.NavigateTo($"/test/updatetest/{testId}");
    }

    private void TestDetails(int testId)
    {
        NavigationManager.NavigateTo($"/test/details/{testId}");
    }

    @inject IJSRuntime JS

    private async Task DeleteTest(int testId)
    {
        bool confirm = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this test?");

        if (confirm)
        {
            var client = HttpClientFactory.CreateClient("DefectReporter.ServerAPI");

            var response = await client.DeleteAsync($"api/test/deleteTest/{testId}");

            if (response.IsSuccessStatusCode)
            {
                await LoadTests();
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
            }
        }
    }

    private async Task LoadTests()
    {
        var client = HttpClientFactory.CreateClient("DefectReporter.PublicServerAPI");

        try
        {
            tests = await client.GetFromJsonAsync<List<Test>>("api/test/getTests");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }
}